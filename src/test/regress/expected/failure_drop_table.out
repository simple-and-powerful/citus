SET citus.next_shard_id TO 100300;
ALTER SEQUENCE pg_catalog.pg_dist_placement_placementid_seq RESTART 40;
SELECT citus.mitmproxy('flow.kill()');
 mitmproxy 
-----------
 
(1 row)

SELECT citus.mitmproxy('recorder.reset()');
 mitmproxy 
-----------
 
(1 row)

-- none of these commands generate network traffic
SET citus.shard_replication_factor TO 2;
CREATE TABLE append (id int);
SELECT create_distributed_table('append', 'id', 'append');
 create_distributed_table 
--------------------------
 
(1 row)

DROP TABLE append;
-- prove no network traffic happend
SELECT count(1) FROM citus.mitmproxy('recorder.dump()');
 count 
-------
     1
(1 row)

SELECT citus.mitmproxy('flow.allow()');
 mitmproxy 
-----------
 
(1 row)

CREATE TABLE append (id int);
SELECT create_distributed_table('append', 'id', 'append');
 create_distributed_table 
--------------------------
 
(1 row)

SELECT master_create_empty_shard('append');
 master_create_empty_shard 
---------------------------
                    100300
(1 row)

-- this time we intercepted some packets
SELECT count(1) FROM citus.mitmproxy('recorder.dump()');
 count 
-------
     6
(1 row)

SELECT * FROM pg_dist_shard;
 logicalrelid | shardid | shardstorage | shardminvalue | shardmaxvalue 
--------------+---------+--------------+---------------+---------------
 append       |  100300 | t            |               | 
(1 row)

SELECT * FROM pg_dist_shard_placement;
 shardid | shardstate | shardlength | nodename  | nodeport | placementid 
---------+------------+-------------+-----------+----------+-------------
  100300 |          1 |           0 | localhost |    57637 |          40
  100300 |          1 |           0 | localhost |    57640 |          41
(2 rows)

-- drop the connection right at the beginning
-- we fail before the transaction can be started, so Citus has no choice but to continue
-- with dropping the table, shards on the other worker have already been dropped
SELECT citus.mitmproxy('flow.contains(b"assign_distributed_transaction_id").kill()');
 mitmproxy 
-----------
 
(1 row)

DROP TABLE append;
WARNING:  connection not open
CONTEXT:  while executing command on localhost:57640
SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 17 at PERFORM
WARNING:  could not connect to shard "append_100300" on node "localhost:57640"
DETAIL:  Marking this shard placement for deletion
CONTEXT:  SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 17 at PERFORM
WARNING:  connection not open
CONTEXT:  while executing command on localhost:57640
WARNING:  connection not open
CONTEXT:  while executing command on localhost:57640
WARNING:  connection not open
CONTEXT:  while executing command on localhost:57640
SELECT * FROM pg_dist_shard;
 logicalrelid | shardid | shardstorage | shardminvalue | shardmaxvalue 
--------------+---------+--------------+---------------+---------------
(0 rows)

SELECT * FROM pg_dist_shard_placement;
 shardid | shardstate | shardlength | nodename  | nodeport | placementid 
---------+------------+-------------+-----------+----------+-------------
  100300 |          3 |           0 | localhost |    57640 |          41
(1 row)

SELECT citus.mitmproxy('flow.allow()');
 mitmproxy 
-----------
 
(1 row)

CREATE TABLE append (id int);
SELECT create_distributed_table('append', 'id', 'append');
 create_distributed_table 
--------------------------
 
(1 row)

SELECT master_create_empty_shard('append');
 master_create_empty_shard 
---------------------------
                    100301
(1 row)

SELECT * FROM pg_dist_shard;
 logicalrelid | shardid | shardstorage | shardminvalue | shardmaxvalue 
--------------+---------+--------------+---------------+---------------
 append       |  100301 | t            |               | 
(1 row)

SELECT * FROM pg_dist_shard_placement;
 shardid | shardstate | shardlength | nodename  | nodeport | placementid 
---------+------------+-------------+-----------+----------+-------------
  100301 |          1 |           0 | localhost |    57637 |          43
  100300 |          3 |           0 | localhost |    57640 |          41
  100301 |          1 |           0 | localhost |    57640 |          42
(3 rows)

SELECT citus.mitmproxy('flow.contains(b"DROP TABLE IF EXISTS").kill()');
 mitmproxy 
-----------
 
(1 row)

DROP TABLE append;
ERROR:  server closed the connection unexpectedly
	This probably means the server terminated abnormally
	before or while processing the request.
CONTEXT:  while executing command on localhost:57640
SQL statement "SELECT master_drop_all_shards(v_obj.objid, v_obj.schema_name, v_obj.object_name)"
PL/pgSQL function citus_drop_trigger() line 17 at PERFORM
-- we're inside a transaction so we rollback when the connection failure happens, the
-- table is still there
SELECT * FROM pg_dist_partition;
 logicalrelid | partmethod |                                                        partkey                                                         | colocationid | repmodel 
--------------+------------+------------------------------------------------------------------------------------------------------------------------+--------------+----------
 append       | a          | {VAR :varno 1 :varattno 1 :vartype 23 :vartypmod -1 :varcollid 0 :varlevelsup 0 :varnoold 1 :varoattno 1 :location -1} |            0 | c
(1 row)

SELECT * FROM pg_dist_shard;
 logicalrelid | shardid | shardstorage | shardminvalue | shardmaxvalue 
--------------+---------+--------------+---------------+---------------
 append       |  100301 | t            |               | 
(1 row)

SELECT * FROM pg_dist_shard_placement;
 shardid | shardstate | shardlength | nodename  | nodeport | placementid 
---------+------------+-------------+-----------+----------+-------------
  100301 |          1 |           0 | localhost |    57637 |          43
  100300 |          3 |           0 | localhost |    57640 |          41
  100301 |          1 |           0 | localhost |    57640 |          42
(3 rows)

SELECT citus.mitmproxy('flow.contains(b"PREPARE TRANSACTION").kill()');
 mitmproxy 
-----------
 
(1 row)

-- everything is rolled back again, we're still in a transaction
DROP TABLE append;
ERROR:  connection not open
CONTEXT:  while executing command on localhost:57640
SELECT citus.mitmproxy('flow.contains(b"COMMIT PREPARED").kill()');
 mitmproxy 
-----------
 
(1 row)

SELECT count(1) FROM pg_dist_transaction;
 count 
-------
     8
(1 row)

-- we've already sent COMMIT PREPARED to the other worker, so there's no turning back now!
-- we have, however, gained an entry in pg_dist_transaction. A later call to
-- recover_prepared_transactions() will fix that.
DROP TABLE append;
WARNING:  connection not open
CONTEXT:  while executing command on localhost:57640
WARNING:  failed to commit transaction on localhost:57640
WARNING:  failed to roll back prepared transaction 'citus_0_21113_16_4'
HINT:  Run "COMMIT PREPARED 'citus_0_21113_16_4'" on localhost:57640
WARNING:  connection not open
CONTEXT:  while executing command on localhost:57640
SELECT count(1) FROM pg_dist_transaction;
 count 
-------
    10
(1 row)

-- okay, clean up after ourselves
SELECT citus.mitmproxy('flow.allow()');
 mitmproxy 
-----------
 
(1 row)

SELECT recover_prepared_transactions();
 recover_prepared_transactions 
-------------------------------
                             1
(1 row)

-- next steps:
-- PREPARE TRANSACTION
-- COMMIT PREPARED
-- variables:
-- 2PC
-- replication factor
-- append / hash distribution
